generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DayStatus {
  NOT_CHECKED_IN
  WORKING
  OFF_DUTY
  ON_LEAVE
  ABSENT
}

enum DaySource {
  SYSTEM
  ATTENDANCE
  LEAVE
  MANUAL
  LINE
}

enum InvoiceStatus {
  PENDING // ค้างชำระ
  OVERDUE // เกินกำหนด
  PAID // ชำระแล้ว
  PARTIAL // ชำระบางส่วน
}

enum ArrivalStatus {
  ON_TIME
  LATE
}

enum PayrollRunStatus {
  DRAFT
  CLOSED
}

enum PayrollItemStatus {
  UNPAID
  PAID
}

model Employee {
  id               String  @id @map("employee_id")
  name             String  @db.VarChar(255)
  position         String  @db.VarChar(255)
  phone            String  @db.VarChar(50)
  email            String? @db.VarChar(255)
  profileImagePath String? @map("profile_image_path") @db.VarChar(255)

  // ของเดิมคุณมีอยู่แล้ว:
  driverAssignments      TruckDriverAssignment[]
  currentDrivenTrucks    Truck[]                  @relation("CurrentTruckDriver")
  Attendance             Attendance[]
  EmployeeCall           EmployeeCall[]
  JobAssignment          JobAssignment[]
  EmployeeMonthlySummary EmployeeMonthlySummary[]
  EmployeeDayStatus      EmployeeDayStatus[]
  LeaveRequest           LeaveRequest[]

  // ← เพิ่มบรรทัดนี้ (ชื่อ relation ต้องตรงกันสองฝั่ง)
  payrollItems PayrollItem[] @relation("EmployeePayrollItems")
}

model Attendance {
  id          String        @id @default(cuid()) @map("attendance_id") // <— เพิ่ม default
  employee_id String
  work_date   DateTime      @db.Date // วันที่ทำงาน
  check_in    DateTime      @db.DateTime(0) // เวลาที่หัวหน้าใส่
  check_out   DateTime?     @db.DateTime(0) // เวลาที่หัวหน้าใส่
  status      ArrivalStatus // หัวหน้าเลือก ON_TIME หรือ LATE

  Employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Attendance_ibfk_1")

  @@unique([employee_id, work_date], map: "uq_att_once_per_day")
  @@index([employee_id, work_date])
}

model JobAssignment {
  id              String    @id @default(cuid())
  employee_id     String
  job_description String    @db.Text
  assigned_date   DateTime  @db.DateTime(0)
  source          String    @default("LINE") @db.VarChar(20)
  accepted_at     DateTime? @db.DateTime(0)

  //  เพิ่ม
  completed_at   DateTime? @db.DateTime(0)
  completed_by   Int? // staff_id ผู้กดยืนยัน (ถ้าจะเก็บ)
  completed_note String?   @db.VarChar(255)

  Employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  Trip     Trip[]

  @@index([employee_id])
}

// ===== งวดเงินเดือนต่อเดือน =====
model PayrollRun {
  id         Int              @id @default(autoincrement())
  year       Int
  month      Int // 1..12
  title      String?          @db.VarChar(255)
  note       String?          @db.VarChar(255)
  status     PayrollRunStatus @default(DRAFT)
  total      Decimal          @default(0) @db.Decimal(12, 2) // รวม net ของรายการ
  created_at DateTime         @default(now()) @db.DateTime(0)

  // relations
  yearRef InvoiceYear   @relation(fields: [year], references: [year], onDelete: NoAction, map: "PayrollRun_ibfk_year")
  items   PayrollItem[]

  @@unique([year, month], map: "uq_payroll_run_year_month")
  @@index([year, month], map: "idx_payroll_run_ym")
}

// PAYROLL ITEM: แถวพนักงานในงวด
model PayrollItem {
  id             Int               @id @default(autoincrement())
  payroll_run_id Int
  employee_id    String? // SetNull เพื่อเก็บประวัติแม้ลบพนักงาน
  base_salary    Decimal           @db.Decimal(12, 2)
  allowance      Decimal           @default(0) @db.Decimal(12, 2)
  overtime       Decimal           @default(0) @db.Decimal(12, 2)
  deduction      Decimal           @default(0) @db.Decimal(12, 2)
  net_amount     Decimal           @db.Decimal(12, 2) // = base + allowance + overtime - deduction
  status         PayrollItemStatus @default(UNPAID)
  paid_at        DateTime?         @db.Date
  note           String?           @db.VarChar(255)

  // relations
  run      PayrollRun @relation(fields: [payroll_run_id], references: [id], onDelete: Cascade, map: "PayrollItem_ibfk_run")
  employee Employee?  @relation("EmployeePayrollItems", fields: [employee_id], references: [id], onDelete: SetNull, map: "PayrollItem_ibfk_emp")

  @@unique([payroll_run_id, employee_id], map: "uq_payroll_item_unique_emp_in_run")
  @@index([employee_id], map: "idx_payroll_item_emp")
  @@index([paid_at], map: "idx_payroll_item_paid_at")
}

model Truck {
  id                           String   @id @default(cuid()) @map("truck_id") @db.VarChar(36)
  plate                        String   @db.VarChar(50)
  model                        String?  @db.VarChar(100)
  total_distance               Decimal  @default(0) @db.Decimal(12, 2)
  fuel_efficiency_km_per_liter Decimal? @db.Decimal(10, 2)

  // ความสัมพันธ์
  assignments       TruckDriverAssignment[]
  current_driver_id String?
  currentDriver     Employee?               @relation("CurrentTruckDriver", fields: [current_driver_id], references: [id], onDelete: SetNull)

  fuelLogs     FuelLog[]
  trips        Trip[]
  distanceLogs TruckDistanceLog[]
  expenses     TruckExpense[]
  // @@map("trucks") // เปิดถ้าชื่อตารางจริงไม่ตรง

  @@unique([plate], map: "uq_truck_plate")
  @@unique([current_driver_id]) // <— กันคนขับซ้ำข้ามคัน
  @@index([current_driver_id])
}

// ตารางใหม่: เก็บประวัติว่าใครขับรถไหน ช่วงเวลาใด
model TruckDriverAssignment {
  id          Int       @id @default(autoincrement())
  truck_id    String
  employee_id String
  start_at    DateTime  @db.DateTime(0)
  end_at      DateTime? @db.DateTime(0)

  Truck    Truck    @relation(fields: [truck_id], references: [id], onDelete: Cascade)
  Employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@index([truck_id, start_at])
  @@index([truck_id, end_at])
  @@index([employee_id, start_at])
}

model Trip {
  id               String        @id @map("trip_id")
  job_id           String
  truck_id         String
  distance_km      Int
  trip_date        DateTime      @db.Date
  fuel_used_liters Decimal?      @db.Decimal(10, 2) // จะเก็บถ้าคุณอยากบันทึกเอง (หรือให้ระบบคำนวณให้ก็ได้)
  JobAssignment    JobAssignment @relation(fields: [job_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Trip_ibfk_1")
  Truck            Truck         @relation(fields: [truck_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "Trip_ibfk_2")

  @@index([job_id], map: "job_id")
  @@index([truck_id], map: "truck_id")
  @@index([trip_date], map: "idx_trip_date") // ใช้กราฟ/รายงานตามเดือน
}

model FuelLog {
  id              Int      @id @default(autoincrement())
  truck_id        String
  fuel_date       DateTime @db.Date
  round_number    Int      @default(1)
  liters          Decimal  @db.Decimal(10, 2)
  cost            Decimal  @db.Decimal(12, 2)
  price_per_liter Decimal? @db.Decimal(10, 2)

  truck Truck @relation(fields: [truck_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FuelLog_ibfk_1")
  // @@map("fuel_logs")

  @@unique([truck_id, fuel_date, round_number], map: "uq_fuellog_truck_date_round") // กันซ้ำ
  @@index([truck_id], map: "idx_fuellog_truck")
  @@index([fuel_date], map: "idx_fuellog_date")
}

model TruckDistanceLog {
  id           Int      @id @default(autoincrement())
  truck_id     String
  log_date     DateTime @db.Date
  round_number Int      @default(1)
  distance_km  Decimal  @db.Decimal(10, 2)

  truck Truck @relation(fields: [truck_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "TruckDistanceLog_ibfk_1")
  // @@map("truck_distance_logs")

  @@unique([truck_id, log_date, round_number], map: "uq_dist_truck_date_round")
  @@index([truck_id], map: "idx_truckdist_truck")
}

model TruckExpense {
  id           Int      @id @default(autoincrement())
  truck_id     String
  expense_date DateTime @db.Date
  description  String?  @db.Text
  amount       Decimal  @db.Decimal(10, 2)
  Truck        Truck    @relation(fields: [truck_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "TruckExpense_ibfk_1")

  @@index([truck_id], map: "truck_id")
  @@index([expense_date], map: "idx_truckexpense_date")
}

model EmployeeCall {
  id          Int       @id @default(autoincrement())
  employee_id String
  call_date   DateTime  @db.Date
  message     String?   @db.Text
  created_at  DateTime? @default(now()) @db.DateTime(0)
  Employee    Employee  @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "EmployeeCall_ibfk_1")

  @@index([employee_id], map: "employee_id")
}

model EmployeeMonthlySummary {
  id           Int      @id @default(autoincrement())
  employee_id  String
  year         Int
  month        Int // 1..12
  planned_days Int      @default(0) // จำนวนวันที่มีกะ/ต้องทำงาน
  present_days Int      @default(0) // มาทำงาน (มี attendance)
  late_days    Int      @default(0) // มาสาย
  absent_days  Int      @default(0) // ขาดงาน (ไม่มี attendance และไม่ได้ลา)
  leave_days   Int      @default(0) // ลา
  work_hours   Decimal? @db.Decimal(10, 2) // ชม.ทำงานรวม (ถ้าต้องใช้)
  on_time_rate Decimal? @db.Decimal(5, 2) // % ตรงเวลา

  Employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@unique([employee_id, year, month], map: "uq_employee_month")
  @@index([year, month], map: "idx_empms_year_month")
}

model FinanceMonthlySummary {
  id              Int     @id @default(autoincrement())
  year            Int
  month           Int
  income_received Decimal @default(0) @db.Decimal(12, 2) // รวมเงิน “รับจริง” (Income.income_date)
  expense_total   Decimal @default(0) @db.Decimal(12, 2) // FuelLog.cost + TruckExpense.amount (+ อื่นๆถ้ามี)
  net_profit      Decimal @default(0) @db.Decimal(12, 2) // income_received - expense_total

  invoice_paid_amount    Decimal @default(0) @db.Decimal(12, 2)
  invoice_pending_amount Decimal @default(0) @db.Decimal(12, 2)
  invoice_overdue_amount Decimal @default(0) @db.Decimal(12, 2)
  invoice_count          Int     @default(0)
  paid_count             Int     @default(0)
  pending_count          Int     @default(0)
  overdue_count          Int     @default(0)

  updated_at DateTime @default(now()) @db.DateTime(0)

  @@unique([year, month], map: "uq_finance_month")
}

model TravelCost {
  id              Int       @id @default(autoincrement())
  min_km          Int
  max_km          Int? // null = ไร้เพดาน
  price_per_round Decimal   @db.Decimal(10, 2) // ราคา/รอบ ตามช่วงนี้
  effective_from  DateTime  @db.Date // วันเริ่มใช้กติกา
  effective_to    DateTime? @db.Date // null = ใช้ต่อเนื่อง
  is_active       Boolean   @default(true)
  note            String?   @db.VarChar(255)

  @@index([effective_from, effective_to])
  @@index([min_km, max_km])
}

model Income {
  id                  Int           @id @default(autoincrement())
  receiptNo           String        @unique
  customerName        String?
  contractDate        DateTime
  dueDate             DateTime?
  amount              Decimal       @db.Decimal(12, 2)
  status              InvoiceStatus @default(PENDING)
  receivedAt          DateTime?
  createdAt           DateTime      @default(now()) @db.DateTime(0)
  description         String?       @db.Text
  category            String?       @db.VarChar(100)
  contract_image_path String?       @db.VarChar(255)

  payments PaymentRecord[] // ← ใช้ตารางเดียวกับ Invoice

  @@index([contractDate], map: "idx_income_contractDate")
  @@index([dueDate], map: "idx_income_dueDate")
  @@index([status], map: "idx_income_status")
  @@index([createdAt], map: "idx_income_createdAt")
}

model Invoice {
  id           Int             @id @default(autoincrement())
  invoiceNo    String          @unique
  customerName String
  contractDate DateTime
  dueDate      DateTime
  amount       Decimal         @db.Decimal(12, 2)
  status       InvoiceStatus   @default(PENDING)
  paidAt       DateTime?
  createdAt    DateTime        @default(now())
  description  String?         @db.Text
  payments     PaymentRecord[] // <- ใช้ตารางนี้นับยอดที่จ่ายไปแล้ว
}

model PaymentRecord {
  id           Int      @id @default(autoincrement())
  payment_date DateTime @db.Date
  amount       Decimal  @db.Decimal(12, 2)
  description  String?
  category     String?  @db.VarChar(50) // เช่น 'INVOICE','INCOME','CASH','TRANSFER'
  created_at   DateTime @default(now()) @db.DateTime(0)

  // ใช้อย่างใดอย่างหนึ่งเท่านั้น
  invoice_id Int?
  invoice    Invoice? @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  income_id Int?
  income    Income? @relation(fields: [income_id], references: [id], onDelete: Cascade)

  @@index([invoice_id], map: "idx_payment_invoice")
  @@index([income_id], map: "idx_payment_income")
}

model Staff {
  staff_id           Int      @id @default(autoincrement())
  username           String   @unique @db.VarChar(100)
  password_hash      String   @db.VarChar(255)
  name               String?  @db.VarChar(255)
  role               String   @default("staff") @db.VarChar(50)
  profile_image_path String?  @db.VarChar(255)
  created_at         DateTime @default(now()) @db.DateTime(0)

  // relations (optional แต่ดีต่อการอ่าน)

  leaveRequests LeaveRequest[]
}

model EmployeeDayStatus {
  employee_id String
  work_date   DateTime  @db.Date
  status      DayStatus
  source      DaySource @default(SYSTEM)
  updated_at  DateTime  @default(now()) @db.DateTime(0)

  // NEW: เก็บผล ON_TIME / LATE สำหรับวันที่ WORKING/OFF_DUTY
  arrival_detail ArrivalStatus?

  Employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)

  @@id([employee_id, work_date])
  @@index([status])
  @@index([work_date], map: "idx_eds_work_date")
  @@index([source])
  @@index([arrival_detail]) // ช่วยคำนวณ % เร็ว
}

model LeaveRequest {
  leave_id    Int      @id @default(autoincrement())
  employee_id String
  leave_date  DateTime @db.Date
  leave_type  String   @db.VarChar(20) // SICK | PERSONAL | VACATION | OTHER
  reason      String?  @db.Text
  approved_by Int
  approved_at DateTime @default(now()) @db.DateTime(0)
  created_at  DateTime @default(now()) @db.DateTime(0)

  Employee Employee @relation(fields: [employee_id], references: [id], onDelete: Cascade)
  Staff    Staff    @relation(fields: [approved_by], references: [staff_id])

  @@unique([employee_id, leave_date])
  @@index([employee_id, leave_date])
}

model WorkYear {
  year       Int      @id
  created_at DateTime @default(now()) @db.DateTime(0)

  @@map("WorkYear") // จะใส่หรือไม่ใส่ก็ได้ แค่ทำให้ชื่อ table ชัด
}

// INVOICE YEAR: ปีที่ใช้ผูกกับงวดเงินเดือน
model InvoiceYear {
  year       Int      @id
  created_at DateTime @default(now()) @db.DateTime(0)

  // ← back-relation ของ PayrollRun.yearRef
  payrollRuns PayrollRun[]

  @@map("InvoiceYear")
}

model IncomeYear {
  year       Int      @id
  created_at DateTime @default(now()) @db.DateTime(0)

  @@map("IncomeYear")
}
